version: "3.9"

services:
  bezeichner:
    image: alexfalkowski/bezeichner
    command: server
    restart: always
    environment:
      CONFIG_FILE: /config/bezeichner.yml
    ports:
      - "2000:8080"
    volumes:
      - "${PWD}/config:/config"

  standort:
    image: alexfalkowski/standort
    command: server
    restart: always
    environment:
      CONFIG_FILE: /config/standort.yml
    ports:
      - "3000:8080"
    volumes:
      - "${PWD}/config:/config"

  konfig:
    image: alexfalkowski/konfig
    command: server
    restart: always
    environment:
      - CONFIG_FILE=/config/konfig.yml
      - KONFIG_GIT_TOKEN=${GITHUB_TOKEN}
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=vault-plaintext-root-token
      - AWS_URL=http://localstack:4566
      - AWS_REGION=eu-west-1
      - AWS_ACCESS_KEY=access
      - AWS_SECRET_KEY=secret
    ports:
      - "4000:8080"
    volumes:
      - "${PWD}/config:/config"
    depends_on:
      - vault
      - localstack

  auth:
    image: alexfalkowski/auth
    command: server
    restart: always
    environment:
      CONFIG_FILE: yaml:CONFIG
      CONFIG: >
        cache:
          ristretto:
            max_counters: 10000000
            max_cost: 100000000
            buffer_items: 64
        server:
          v1:
            issuer: https://auth.falkowski.io
            casbin:
              model: |
                [request_definition]
                r = sub, obj, act

                [policy_definition]
                p = sub, obj, act

                [policy_effect]
                e = some(where (p.eft == allow))

                [matchers]
                m = r.sub == p.sub && r.obj == p.obj && r.act == p.act
              policy: |
                p, konfig, standort, get-location
            key:
              ed25519:
                public: IRvqAoQ4YWqqTL2IURucPbJHVSLw0/IWLCzvriHlhfc=
                private: ExLPFIiOLB6fllC0LyseUyiwEyu403j+vk2GD1v2LKUhG+oChDhhaqpMvYhRG5w9skdVIvDT8hYsLO+uIeWF9w==
              rsa:
                public: MIICCgKCAgEArr7wXDt64xGmpOUte/CiWo2lk13saxIN5+p2blatwzfUmWlES01WXh95rb7ezr+9a6RVEoJ9V6uEOD8qLeoHBYIzLoB7wrtNAlOXEY4niqzFoVUsiu6Rstf45+uuT1Jg27tn5pRPE5LQGgLfRw+rNmB9prU/r+Gojk9QG24cNf/0M0vnOZ4t2L/fSQo7XXd3U7AsG4r1aenGyoPweVgMYy/8/8K9ZYCLwrcIKYqNzOX+JFA7aGh9NsqQYMSIJhafKlPHlpFicUkrcPkfPTbYMYau82fLahtN7x0/2+mcw/9G73S4d5Rh6CFgqUgOzi8FUvfaq/e42AMBfGPup481qCe2KxsE/7oB5eDRAOusZCo83x9uV5BjLokqTXl9Wcmc7W90J3unLEO+mrGUZhCswzuERgfg7a2W25x4PAf29he6xjEYChiV+F7WRHUQ8FWjVABnIb6USMKW+aB7klBz5fCeaDtbXTEGv01Xh9xb6m+4/RmmbfVbr9thw9QiVY5mJA0FqF2r4T6zMRHkvmT+Tt5AMHnFdzJWRXTATVCJfxCqIMCx94ifq7c8SNqt8j72xjjsLlaC5PEECJ/dkJruhRSZs8aISevBIdvJeVh/MMdajiyQovVjHW8WRHwgFrf2Rl0t0g3lsGqAGQ2qzy6sNc27+ul9b2Yo7JYErW5zn2kCAwEAAQ==
                private: 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
            admins:
              - id: su-1234
                hash: $$2a$$10$$gDNgEudBe.wJd7cZtBq9tuAFpHvXuzervylm593VY7Pt4O9I.zJEm
            services:
              - id: konfig
                hash: $$2a$$10$$bimUI5M/pkRYgIC3UHzgy.cZjFetNvgt3vG.SPVQRsqU8OFb8V9UG
                duration: 24h
              - id: standort
                hash: $$2a$$10$$HsHqKfiEw8xSavbN.EAtV.Cqs.17m.hy7vVjKkyFU7DNrteDaDLKi
                duration: 24h
        health:
          duration: 1s
          timeout: 1s
        trace:
          opentracing:
            kind: jaeger
            host: jaegertracing:6831
        transport:
          port: 8080
          http:
            user_agent: "Auth-server/1.0 http/1.0"
            retry:
              timeout: 2s
              attempts: 3
          grpc:
            user_agent: "Auth-server/1.0 grpc/1.0"
            retry:
              timeout: 2s
              attempts: 3
    ports:
      - "5000:8080"
    volumes:
      - "${PWD}/config:/config"

  jaegertracing:
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - "16686:16686"
      - "6831:6831/udp"

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - "5432:5432"

  redis:
    image: redis
    ports:
      - "6379:6379"

  nsqlookupd:
    image: nsqio/nsq
    command: /nsqlookupd -broadcast-address=localhost
    restart: always
    ports:
      - "4160:4160"
      - "4161:4161"

  nsqd:
    image: nsqio/nsq
    command: /nsqd -broadcast-address=localhost --lookupd-tcp-address=nsqlookupd:4160
    restart: always
    depends_on:
      - nsqlookupd
    ports:
      - "4150:4150"
      - "4151:4151"

  localstack:
    image: localstack/localstack
    restart: always
    ports:
      - "4566:4566"
    environment:
      SERVICES: "s3,sqs,ssm"

  vault:
    image: vault
    restart: always
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "vault-plaintext-root-token"
    cap_add:
      - IPC_LOCK

  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - 9000:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prometheus:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/config.yml

  grafana:
    image: grafana/grafana-oss
    restart: always
    ports:
      - 10000:3000
    depends_on:
      - prometheus
